searchState.loadedDescShard("stl", 0, "STL module\nModels a bidirectional collection, which can be traversed …\nAlgorithms for <code>BidirectionalCollection</code>.\nModels a multi-pass linear sequence of elements.\nAlgorithms for <code>Collection</code>.\nType of element in the collection.\nType that is like <code>&amp;Element</code>. For collections whose elements …\nModels a collection whose elements are computed on element …\nAlgorithms for <code>LazyCollection</code>.\nModels a collection which supports mutating its element\nAlgorithms for <code>MutableCollection</code>.\nParallel Algorithms for <code>Collection</code>.\nType of positions in the collection.\nModels a random access collection (similar to array) where …\nAlgorithms for <code>RandomAccessCollection</code>.\nAny SemiRegular type that is cloneable.\nModels a collection which supports internally reordering …\nAlgorithms for <code>ReorderableCollection</code>.\nAny type that is movable, destructable and equality …\nA contiguous sub-collection of a collection.\nA contiguous mutable sub-collection of a mutable …\nType representing whole collection. i.e., …\nReturns true if all element in <code>self</code> satisfies <code>pred</code>.\nReturns true if all element in <code>self</code> satisfies <code>pred</code>.\nReturns true if atleast one element in <code>self</code> satisfies <code>pred</code>.\nReturns true if atleast one element in <code>self</code> satisfies <code>pred</code>.\nAccess element at position i.\nMutably Access element at position i.\nAll the collections exposed from library.\nComputes element at position <code>i</code>.\nReturns number of elements in collection.\nReturns number of elements in collection.\nReturns number of elements in <code>self</code> equals <code>e</code>.\nReturns number of elements in <code>self</code> equals <code>e</code>.\nReturns number of elements in <code>self</code> satisfying <code>pred</code>.\nReturns number of elements in <code>self</code> satisfying <code>pred</code>.\nReturns number of elements in <code>[from, to)</code>.\nReturns number of elements in <code>[from, to)</code>.\nRemoves the first element if non-empty and returns true; …\nRemoves the first element if non-empty and returns true; …\nRemoves the last element if non-empty and returns true; …\nRemoves the last element if non-empty and returns true; …\nDrops prefix upto specified maximum length.\nDrops prefix upto specified maximum length.\nDrops the prefix of slice till and including given <code>position</code>…\nDrops the prefix of slice till and including given <code>position</code>…\nDrops the prefix of slice upto given <code>position</code>.\nDrops the prefix of slice upto given <code>position</code>.\nDrops suffix upto specified maximum length.\nDrops suffix upto specified maximum length.\nDrops suffix from given <code>position</code>.\nDrops suffix from given <code>position</code>.\nDrops the element of <code>self</code> while the elements satisfy given …\nDrops the element of <code>self</code> till the first element satisfies …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice containing all but the given number of …\nReturns a slice by skipping initial elements while …\nReturns a slice by skipping initial elements while …\nReturns a slice by skipping initial elements while …\nReturns a slice by skipping initial elements while …\nReturns the position just after last element in collection.\nReturns true if elements of self is equal to elements of …\nReturns true if elements of self is equal to elements of …\nReturns true if elements of self is equivalent to elements …\nReturns true if elements of self is equivalent to elements …\nReturns the first element, or nil if <code>self</code> is empty.\nReturns the first element, or nil if <code>self</code> is empty.\nFinds position of first element in <code>self</code> equals <code>e</code>. If no …\nFinds position of first element in <code>self</code> equals <code>e</code>. If no …\nFinds position of first element in <code>self</code> satisfying <code>pred</code>. …\nFinds position of first element in <code>self</code> satisfying <code>pred</code>. …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nApplies f to each element of collection.\nApplies f to each element of collection.\nApplies <code>f</code> to each element of collection.\nApplies <code>f</code> to each element of collection.\nMutates given <code>position</code> to next position in collection.\nIncrements given position by <code>n</code>.\nIncrements given position by <code>n</code>.\nIncrements given position by <code>n</code>, or so that it equals the …\nIncrements given position by <code>n</code>, or so that it equals the …\nMutates the given position to position just before <code>position</code>…\nMutates the given position to nth position before <code>position</code>.\nMutates the given position to nth position before <code>position</code>.\nDecrements given position by <code>n</code>, or so that it equals the …\nDecrements given position by <code>n</code>, or so that it equals the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns slice of the collection covering full collection.\nReturns slice of the collection covering full collection.\nReturns mutable slice of the collection covering full …\nReturns mutable slice of the collection covering full …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if given collection is empty.\nReturns true if given collection is empty.\nReturns an iterator to iterate over element refs in …\nReturns an iterator to iterate over element refs in …\nReturns an iterator to iterate over mutable element refs …\nReturns an iterator to iterate over mutable element refs …\nAll the iterators exposed from library.\nFinds position of <code>last</code> element equals <code>e</code>. If no such …\nFinds position of <code>last</code> element equals <code>e</code>. If no such …\nFinds position of last element in <code>self</code> satisfying <code>pred</code>. If …\nFinds position of last element in <code>self</code> satisfying <code>pred</code>. If …\nReturns the “lazily computed” first element, or nil if …\nReturns the “lazily computed” first element, or nil if …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nReturns the result of combining elements of given …\nApplies f to each “lazily computed” element of …\nApplies f to each “lazily computed” element of …\nReturns an iterator to iterate over lazyily computed …\nReturns an iterator to iterate over lazyily computed …\nReturns a lazy collection projecting elements of mapping …\nReturns a lazy collection projecting elements of mapping …\nReturns two Vec containing the elements of the collection …\nReturns two Vec containing the elements of the collection …\nRemoves and returns the lazily computed first element if …\nRemoves and returns the lazily computed first element if …\nRemoves and returns the lazily computed first element and …\nRemoves and returns the lazily computed first element and …\nRemoves and returns the lazily computed last element if …\nRemoves and returns the lazily computed last element if …\nRemoves and returns the lazily computed last element and …\nRemoves and returns the lazily computed last element and …\nReturns a lazy collection projecting elements of mapping …\nReturns a lazy collection projecting elements of mapping …\nCreates a new instance of slice with given collection and …\nCreates a new instance of slice with given collection and …\nReturns position immediately after <code>position</code>.\nReturns position immediately after <code>position</code>.\nReturns nth position after <code>position</code>.\nReturns nth position after <code>position</code>.\nReturns <code>n</code>th position after given position, unless <code>n</code> is …\nReturns <code>n</code>th position after given position, unless <code>n</code> is …\nReturns true if none of elements in <code>self</code> satisfy <code>pred</code>.\nReturns true if none of elements in <code>self</code> satisfy <code>pred</code>.\nReturns true iff all elements in <code>self</code> satisfies <code>pred</code>.\nReturns true iff all elements in <code>self</code> satisfies <code>pred</code>.\nReturns true iff atleast one element in <code>self</code> satisfies <code>pred</code>…\nReturns true iff atleast one element in <code>self</code> satisfies <code>pred</code>…\nFinds position of first element in <code>self</code> equals <code>e</code>. If no …\nFinds position of first element in <code>self</code> equals <code>e</code>. If no …\nFinds position of first element in <code>self</code> satisfying <code>pred</code>. …\nFinds position of first element in <code>self</code> satisfying <code>pred</code>. …\nFinds position of <code>last</code> element equals <code>e</code>. If no such …\nFinds position of <code>last</code> element equals <code>e</code>. If no such …\nFinds position of last element in <code>self</code> satisfying <code>pred</code>. If …\nFinds position of last element in <code>self</code> satisfying <code>pred</code>. If …\nReturns true iff no element in <code>self</code> satisfies <code>pred</code>.\nReturns true iff no element in <code>self</code> satisfies <code>pred</code>.\nMoves all elements satisfying the given predicate into a …\nMoves all elements satisfying the given predicate into a …\nReturns position of first element of collection for which …\nReturns position of first element of collection for which …\nReturns two Vec containing the elements of the collection …\nReturns two Vec containing the elements of the collection …\nRemoves and returns the first element if non-empty; …\nRemoves and returns the first element if non-empty; …\nRemoves and returns the mutable reference to first element …\nRemoves and returns the first element and its position if …\nRemoves and returns the first element and its position if …\nRemoves and returns the first element and its position if …\nRemoves and returns the last element if non-empty; returns …\nRemoves and returns the last element if non-empty; returns …\nRemoves and returns the last element if non-empty; returns …\nRemoves and returns the last element and its position if …\nRemoves and returns the last element and its position if …\nRemoves and returns the last element and its position if …\nRemoves and returns prefix upto specified maximum length.\nRemoves and returns prefix upto specified maximum length.\nRemoves and returns the prefix till and including given …\nRemoves and returns the prefix till and including given …\nRemoves and returns the prefix slice upto given <code>position</code>.\nRemoves and returns the prefix slice upto given <code>position</code>.\nRemoves and returns suffix upto specified maximum length.\nRemoves and returns suffix upto specified maximum length.\nRemoves and returns suffix from given <code>position</code>.\nRemoves and returns suffix from given <code>position</code>.\nRemoves and returns  the element of <code>self</code> till the first …\nRemoves and returns  the element of <code>self</code> till the first …\nReturns a slice, upto specified maximum length, containing …\nReturns a slice, upto specified maximum length, containing …\nReturns a slice, upto specified maximum length, containing …\nReturns a slice, upto specified maximum length, containing …\nReturns prefix slice of the collection ending at <code>to</code> …\nReturns prefix slice of the collection ending at <code>to</code> …\nReturns mutable prefix slice of the collection ending at <code>to</code>…\nReturns mutable prefix slice of the collection ending at <code>to</code>…\nReturns prefix slice of the collection ending at <code>to</code> …\nReturns prefix slice of the collection ending at <code>to</code> …\nReturns mutable prefix slice of the collection ending at <code>to</code>…\nReturns mutable prefix slice of the collection ending at <code>to</code>…\nReturns prefix slice containing the initial elements until …\nReturns prefix slice containing the initial elements until …\nReturns mutable prefix slice containing the initial …\nReturns mutable prefix slice containing the initial …\nReturns position immediately before <code>position</code>\nReturns position immediately before <code>position</code>\nReturns nth position before <code>position</code>\nReturns nth position before <code>position</code>\nReturns <code>n</code>th position before given position, unless <code>n</code> is …\nReturns <code>n</code>th position before given position, unless <code>n</code> is …\nReverses the order of elements in <code>self</code>.\nReverses the order of elements in <code>self</code>.\nReturns a collection whose elements are in reversed order …\nReturns a collection whose elements are in reversed order …\nSwaps the order in which the values <code>self.prefix_upto(at)</code> …\nSwaps the order in which the values <code>self.prefix_upto(at)</code> …\nReturns slice of collection in positions <code>[from, to)</code>.\nReturns mutable slice of collection in positions <code>[from, to)</code>…\nSorts the collection in place.\nSorts the collection in place.\nSorts the collection in place, using the given predicate …\nSorts the collection in place, using the given predicate …\nReturns two disjoint slices of <code>self</code>, split immediately …\nReturns two disjoint mutable slices of <code>self</code>, split …\nReturns two disjoint slices of <code>self</code> split at the given …\nReturns two disjoint mutable slices of <code>self</code> split at the …\nSplits <code>self</code> into <code>num_slices</code> slices by returning an …\nSplits <code>self</code> into <code>num_slices</code> mutable slices by returning an …\nSplits <code>self</code> into at max <code>max_slices</code> slices with each slice …\nSplits <code>self</code> into at max <code>max_slices</code> mutable slices with …\nSplits <code>self</code> into slices separated by elements that satisfy …\nSplits <code>self</code> into mutable slices separated by elements that …\nReturns two disjoint slices of <code>self</code>, split immediately …\nReturns two disjoint slices of <code>self</code>, split immediately …\nReturns two disjoint mutable slices of <code>self</code>, split …\nReturns two disjoint mutable slices of <code>self</code>, split …\nReturns two disjoint slices of <code>self</code> split at the given …\nReturns two disjoint slices of <code>self</code> split at the given …\nReturns two disjoint mutable slices of <code>self</code> split at the …\nReturns two disjoint mutable slices of <code>self</code> split at the …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator that iterates through evenly sized …\nReturns an iterator of slices which are separated by …\nReturns an iterator of slices which are separated by …\nReturns an iterator of mutable slices which are separated …\nReturns an iterator of mutable slices which are separated …\nMoves all elements satisfying the given predicate into a …\nMoves all elements satisfying the given predicate into a …\nReturns the position of first element in self, or if self …\nReturns a slice, upto specified maximum length, containing …\nReturns a slice, upto specified maximum length, containing …\nReturns suffix slice of the collection starting from <code>from</code> …\nReturns suffix slice of the collection starting from <code>from</code> …\nReturns mutable suffix slice of the collection starting …\nReturns mutable suffix slice of the collection starting …\nReturns a slice, upto specified maximum length, containing …\nReturns a slice, upto specified maximum length, containing …\nSwaps element at position i with element at position j.\nReturns count less than or equal to number of elements in …\nReturns count less than or equal to number of elements in …\nProxy Reference to temporary value.\nReturns the reference to whole collection.\nAn empty collection.\nA lazy collection whose elements are applying closure on …\nA lazy collection whose elements are applying closure on …\nA collection that presents element in reverse order of …\nA collection of one element.\nThe base collection.\nThe base collection.\nThe base collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA collection that presents element in reverse order of …\nPosition type of ReversedCollection.\nThe base collection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new instance of ReversedCollection created from …\nReturns the reversed collection of self i.e., base …\nAn iterator to iterate over element-ref of collection.\nAn iterator to iterate over lazily computed elements of …\nAn iterator to iterate over mutable reference of elements …\nAn iterator yielding evenly sized slices of collection.\nAn iterator yielding evenly sized mutable slices of …\nAn iterator of slices which are separated by elements that …\nAn iterator of mutable slices which are separated by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxy Reference to temporary value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")